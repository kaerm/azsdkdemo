@page "/"
@inject ApiServiceClient ApiServiceClient;
@inject FunctionsServiceClient FunctionsServiceClient;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<h1 class="text-center">Memealyzer</h1>

<div class="container" style="margin-bottom:10px">
    <div class="row text-center">
        <div class="col-md-12">
            <EditForm OnValidSubmit="HandleAddFormSubmit" Model="@image">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-row">
                    <div class="col col-md-11">
                        <InputText id="url" @bind-Value="image.Url" class="form-control"/>
                    </div>
                    <div class="col col-md-1">
                        <button type="submit" value="submit" disabled="@(!IsConnected)" class="btn"><span class="oi oi-plus" title="Add Meme" aria-hidden="true"></span></button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (images == null)
{
    <div class="container">
    <div class="row text-center">
        <div class="col-md-12">
            <div class="spinner-grow" role="status">
                <span class="sr-only">Loading memes...</span>
            </div>
            <p>Loading memes...</p>
        </div>
    </div>
</div>
}
else
{
    <div class="container">
        <div class="row text-center text-lg-left">
            @foreach (var image in images)
            {
                <div class="col-md-4">
                   <div class="card" style="width: 100%;margin-bottom:5px;">
                        <img class="card-img-top border border-8 border-@image.Color img-thumbnail" style="border-style: @borderStyle !important" src="@image.BlobUri" alt="">
                        <div class="card-body">
                            <p class="card-text">@image.Text</p>
                            <p class="card-text">@image.Status</p>
                            <div class="text-right">
                                <button type="submit" value="submit" disabled="@(!IsConnected)" class="btn" @onclick="@(async () => await DeleteImage(image.Id))"><span style="font-size: 12px" class="oi oi-trash" title="Delete Meme" aria-hidden="true"></span></button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Image> images;
    private Image image = new Image();
    private HubConnection hubConnection;
    private string borderStyle;

    protected override async Task OnInitializedAsync()
    {
        borderStyle = await ApiServiceClient.GetBorderStyle();
        images = await ApiServiceClient.GetImages();

        hubConnection = FunctionsServiceClient.GetHubConnection();

        hubConnection.On<Image>("ReceiveImage", (image) =>
        {
            int index = FindImageById(image.Id);
            if (index >= 0)
            {
                images[index] = image;
            }
            else
            {
                images.Insert(0, image);
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private int FindImageById(string id)
    {
        return images.FindIndex(0, f => string.Compare(f.Id, id, true) == 0);
    }

    private async Task HandleAddFormSubmit()
    {
        var type = image.Type;
        var url = image.Url;
        image = new Image();

        //TODO : Figure out why this renders the previous image and not the new image for a split second.
        Image postedImage = new Image{ Id = Guid.NewGuid().ToString(), Type = type, BlobUri = url };
        postedImage = await ApiServiceClient.PostImage(postedImage);
        images.Insert(0, postedImage);
        StateHasChanged();
    }
    
    public async Task DeleteImage(string id)
    {
        int index = FindImageById(id);
        Console.WriteLine(index);
        if (index >= 0)
        {
            images.RemoveAt(index);
        }
        StateHasChanged();
        var deletedImage = await ApiServiceClient.DeleteImage(id);
      }
     
    public bool IsConnected =>
        hubConnection != null && hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}